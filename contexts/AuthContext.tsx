// src/App.tsx (The All-in-One Final Version)

import React, { createContext, useState, useContext, useEffect, useCallback, ReactNode } from 'react';
import { BrowserRouter, Routes, Route, Navigate, useLocation, NavLink, Outlet } from 'react-router-dom';
import { supabase } from './lib/supabaseClient';
import { Session } from '@supabase/supabase-js';

// ===================================================================
// 1. AUTHENTICATION LOGIC (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏à‡∏≤‡∏Å AuthContext)
// ===================================================================
interface AppUser { id: string; email: string; role: string; name?: string; department?: string; }
interface AuthContextType { user: AppUser | null; isLoading: boolean; login: (email: string, pass: string) => Promise<{success: boolean, error?: any}>; logout: () => void; }

const AuthContext = createContext<AuthContextType>(null!);
const useAuth = () => useContext(AuthContext);

const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<AppUser | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const checkUser = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      if (session?.user) {
        const { data: profile } = await supabase.from('users').select('role').eq('user_id', session.user.id).single();
        setUser({ id: session.user.id, email: session.user.email || '', role: profile?.role || 'staff' });
      }
      setIsLoading(false);
    };
    checkUser();
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      checkUser();
    });
    return () =>‡πÇ‡∏≠ subscription.unsubscribe();
  }, []);

  const login = async (email: string, password_DUMMY: string) => {
    const { error } = await supabase.auth.signInWithPassword({ email, password: password_DUMMY });
    return { success: !error, error };
  };

  const logout =‡πÄ‡∏Ñ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏ö‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö

**"‡∏° async () => {
    await supabase.auth.signOut();
    setUser(null);
  };
  
  const value = { user, isLoading, login, logout };
  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// ===================================================================
// 2. LAYOUT COMPONENTS (‡∏¢‡∏±‡πà‡∏ß‡∏•‡∏∞ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏•‡∏∞"** -> ‡πÉ‡∏ä‡πà‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô **"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö..."** ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏ô‡∏±‡πâ‡∏ô ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏°‡∏≤‡∏Å

**‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà:**
1.  ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô `handleSubmit` ‡πÉ‡∏ô `LoginPage` ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
2.  `setIsLoading(true)` ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô `disabled` (‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
3.  `await login(email, password)` ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏à‡∏≤‡∏Å Layout.tsx)
// ===================================================================
const MainLayout: React.FC = () => {
  const { user, logout } = useAuth();
  if (!user) return <Navigate to="/login" />; // Safety check

  return (
    <div style={{ display: 'flex', height: '100vh' }}>
      <aside style={{ width: '250px', background: '#2c3e50
4.  **‡πÅ‡∏ï‡πà!** `Promise` ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å `login` **‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (Resolve ‡∏´‡∏£‡∏∑‡∏≠ Reject)**
5.  ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô `setIsLoading(false)` ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡∏±‡∏î‡∏°‡∏≤ ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏¢ ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏∂‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö..."

**‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà Promise ‡πÑ‡∏°‡πà‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:**
*   ‡∏°‡∏µ **Infinite Loop** ‡∏´‡∏£‡∏∑‡∏≠ **Deadlock** ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô `useEffect` ‡∏Ç‡∏≠‡∏á `AuthContext.tsx`
*   ‡πÄ‡∏°‡∏∑‡πà‡∏≠ `login()` ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡πÑ‡∏õ‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô `onAuthStateChange`
*   `onAuthStateChange` ‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å `checkUserSession`
*   ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô `checkUserSession` ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', color: 'white', padding: '1rem' }}>
        <h2>OfficeMate</h2>
        <nav style={{ marginTop: '2rem', display: 'flex', flexDirection: 'column' }}>
          <NavLink to="/dashboard" style={{ color: 'white', padding: '0.5rem' }}>Dashboard</NavLink>
        </nav>
        <div style={{ marginTop: 'auto' }}>
          <p>{user.email}</p>
          <button onClick={logout} style={{ background: 'red', color: 'white', border: 'none', padding: '0.5rem', cursor: 'pointer', width: '100%' }}>Logout</button>
        </div>
      </aside>
      <main style={{ flex: 1, padding: '2rem' }}>
        <Outlet />
      </main>
    </div>
  );
};

‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô `onAuthStateChange` ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏°‡∏±‡∏ô‡∏Å‡πá‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î Loop ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏ö ‡∏ó‡∏≥‡πÉ‡∏´‡πâ `await login(...)` ‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ï‡∏¥‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏ô‡∏±‡πâ‡∏ô

---

### üî• The Final Reset: ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ 100%

‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏ô‡∏¥‡∏î ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ **"‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß"** ‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô 100% ‡∏ã‡∏∂‡πà‡∏á‡∏ú‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏î‡∏¢‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ Loop ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

**‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏ú‡∏ô‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏≤‡∏ß‡∏£:**

---

#### **‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö `AuthContext.tsx`**
‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏£‡∏±‡∏ö// ===================================================================
// 3. PAGE COMPONENTS (‡∏¢‡πâ‡∏≤‡∏¢ LoginPage ‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà)
// ===================================================================
const LoginPage: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { login } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);
    const { success, error: authError } = await login(email, password);
    if (!success) {
      setError(authError?.message || 'Invalid credentials');
    }
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á navigate ‡πÅ‡∏•‡πâ‡∏ß, AppRouter ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á
    setIsLoading(false);
  };

  return (
    <div style={{minHeight: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center', background: '#fce4ec' }}>
      <div style={{padding: '2‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á User ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£ Loading ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

1.  ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå **`src/contexts/AuthContext.tsx`**
2.  **‡∏•‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ:**

```typescript
// src/contexts/AuthContext.tsx
import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';
import { supabase } from '../lib/supabaseClient';
import { Session } from '@supabase/supabase-js';

interface AuthContextType { user: Session['user'] | null; isLoading: boolean; }
export const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<Session['user'] | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user ?? null);
      setIsLoading(false);
    });
    return () => subscription.unsubscribe();
  }, []);

  return <AuthContext.Provider value={{ user, isLoading }}>{children}</AuthContext.Provider>;
};
export const useAuth = () => useContext(AuthContext)!;
